{% if app.user %}
<div id="article-edit-modal" class="fixed inset-0 w-full h-full bg-black bg-opacity-50 flex justify-center items-center z-[1000] hidden">
    <div class="bg-white p-5 rounded-lg w-[90%] max-w-[500px] shadow-lg relative">
        <span class="absolute top-2 right-2 text-2xl cursor-pointer" onclick="closeArticleEditModal()">&times;</span>
        <h2 class="text-xl font-bold mb-4">Modifier un article</h2>
        {{ form_start(form, {'attr': {'id': 'article-edit-form', 'class': 'space-y-4'}, 'action': path('app_article_edit', {'id': 1})}) }}
            {{ form_row(form.title) }}
            {{ form_row(form.author) }}
            {{ form_row(form.link) }}
            <div class="mb-4">
                {{ form_label(form.tags) }}
                <div class="relative w-full">
                    <input id="article-edit-tag-search" type="text" placeholder="Rechercher un mot-clÃ©..." class="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400" autocomplete="off">
                    <div id="article-edit-tag-suggestions" class="absolute left-0 right-0 bg-white border border-gray-200 rounded shadow z-10 mt-1 hidden"></div>
                </div>
                <div id="article-edit-active-tags" class="mt-2 flex flex-wrap gap-2"></div>
                <div style="display: none;"> // to hide the original tags field
                    {{ form_widget(form.tags) }}
                </div>
                {{ form_errors(form.tags) }}
            </div>
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Enregistrer</button>
        {{ form_end(form) }}
    </div>
</div>
<script>
function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn.apply(this, args), delay);
    };
}
let articleEditSelectedTags = [];
function setupArticleEditTagSearch() {
    const input = document.getElementById('article-edit-tag-search');
    const suggestions = document.getElementById('article-edit-tag-suggestions');
    const activeTags = document.getElementById('article-edit-active-tags');
    input.value = '';
    suggestions.innerHTML = '';
    suggestions.classList.add('hidden');
    input.oninput = debounce(function() {
        fetchTags(this.value.trim());
    }, 200);

    input.onfocus = function() {
        fetchTags('');
    };

    function fetchTags(query) {
        fetch('{{ path('app_tag_search') }}?q=' + encodeURIComponent(query))
            .then(r => r.json())
            .then(tags => {
                suggestions.innerHTML = '';
                tags.forEach(tag => {
                    if (articleEditSelectedTags.find(t => t.id == tag.id)) return;
                    const div = document.createElement('div');
                    div.className = 'px-4 py-2 hover:bg-blue-100 cursor-pointer';
                    div.textContent = tag.name;
                    div.onclick = () => {
                        articleEditSelectedTags.push({id: tag.id, name: tag.name});
                        renderArticleEditActiveTags();
                        suggestions.innerHTML = '';
                        suggestions.classList.add('hidden');
                        input.value = '';
                    };
                    suggestions.appendChild(div);
                });
                if (tags.length > 0) {
                    suggestions.classList.remove('hidden');
                } else {
                    suggestions.classList.add('hidden');
                }
            });
    }
    function renderArticleEditActiveTags() {
        activeTags.innerHTML = '';
        articleEditSelectedTags.forEach(tag => {
            const span = document.createElement('span');
            span.className = 'bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full flex items-center gap-1';
            span.innerHTML = `
                ${tag.name}
                <button type="button" class="remove-tag text-indigo-600 font-bold hover:text-red-500" data-tag-id="${tag.id}">&times;</button>
            `;
            const hidden = document.createElement('input');
            hidden.type = 'hidden';
            hidden.name = 'article[tags][]';
            hidden.value = tag.id;
            span.appendChild(hidden);
            span.querySelector('.remove-tag').onclick = () => {
                articleEditSelectedTags = articleEditSelectedTags.filter(t => t.id != tag.id);
                renderArticleEditActiveTags();
            };
            activeTags.appendChild(span);
        });
    }
    document.addEventListener('click', function(e) {
        if (!input.contains(e.target) && !suggestions.contains(e.target)) {
            suggestions.classList.add('hidden');
        }
    });
    document.getElementById('article-edit-form').addEventListener('submit', function() {
        // nothing needed, hidden inputs are already in place
    });
}
function openArticleEditModal(id) {
    const form = document.getElementById('article-edit-form');
    const editUrl = `{{ path('app_article_edit', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', id);
    form.action = editUrl;
    fetch(`/library/article/data/${id}`)
        .then(response => response.json())
        .then(data => {
            form.querySelector('[name$="[title]"]').value = data.title;
            form.querySelector('[name$="[author]"]').value = data.author;
            form.querySelector('[name$="[link]"]').value = data.link;
            articleEditSelectedTags = [];
            if (data.tags) {
                data.tags.forEach(tag => {
                    articleEditSelectedTags.push({id: tag.id, name: tag.name});
                });
            }
            setupArticleEditTagSearch();
            renderArticleEditActiveTags();
            document.getElementById('article-edit-modal').classList.remove('hidden');
        });
    function renderArticleEditActiveTags() {
        const activeTags = document.getElementById('article-edit-active-tags');
        activeTags.innerHTML = '';
        articleEditSelectedTags.forEach(tag => {
            const span = document.createElement('span');
            span.className = 'bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full flex items-center gap-1';
            span.innerHTML = `
                ${tag.name}
                <button type="button" class="remove-tag text-indigo-600 font-bold hover:text-red-500" data-tag-id="${tag.id}">&times;</button>
            `;
            const hidden = document.createElement('input');
            hidden.type = 'hidden';
            hidden.name = 'article[tags][]';
            hidden.value = tag.id;
            span.appendChild(hidden);
            span.querySelector('.remove-tag').onclick = () => {
                articleEditSelectedTags = articleEditSelectedTags.filter(t => t.id != tag.id);
                renderArticleEditActiveTags();
            };
            activeTags.appendChild(span);
        });
    }
}
function closeArticleEditModal() {
    document.getElementById('article-edit-modal').classList.add('hidden');
}
document.addEventListener('DOMContentLoaded', function() {
    setupArticleEditTagSearch();
});
</script>
{% endif %}
