{% extends 'base.html.twig' %}

{% block title %}Bibliothèque{% endblock %}

{% block stylesheets %}
    <script src="https://cdn.tailwindcss.com"></script>
{% endblock %}

{% block body %}
<div>
    {{ render(controller('App\\Controller\\NavbarController::navbar')) }}

    <div class="container mx-auto py-6">
        
        <!-- Navigation Buttons -->
        <div class="flex justify-center space-x-4 mb-6">
            <button class="bg-blue-700 text-white backdrop-blur-sm shadow-lg flex-grow px-4 py-2 rounded-lg font-medium hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 active:bg-blue-900">Auteurs</button>
            <button onclick="window.location.href='{{ path('app_library_articles') }}'" class="bg-white/45 text-gray-700 backdrop-blur-sm shadow-lg flex-grow px-4 py-2 rounded-lg font-medium hover:bg-gray-200/45 focus:outline-none focus:ring-2 focus:ring-gray-400 active:bg-gray-400">Articles</button>
            <button onclick="window.location.href='{{ path('app_library_books') }}'" class="bg-white/45 text-gray-700 backdrop-blur-sm shadow-lg flex-grow px-4 py-2 rounded-lg font-medium hover:bg-gray-200/45 focus:outline-none focus:ring-2 focus:ring-gray-400 active:bg-gray-400">Livres</button>
        </div>

        <!-- Authors Grid -->
        <div class="bg-white/45 backdrop-blur-sm shadow-xl p-4 rounded-lg">
            <!-- Tag Filter Bar -->
            <div class="mb-6">
                <div class="relative w-full max-w-md mx-auto">
                    <input id="tag-search-input" type="text" placeholder="Rechercher un mot-clé..." class="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400" autocomplete="off">
                    <div id="tag-suggestions" class="absolute left-0 right-0 bg-white border border-gray-200 rounded shadow z-10 mt-1 hidden"></div>
                </div>
                <div id="active-tags" class="flex flex-wrap gap-2 mt-2 max-w-md mx-auto"></div>
            </div>
            {% if app.user and app.user.userType == 1 %}
                <div class="w-full flex justify-end mb-4">
                    <button class="inline-block px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition" onclick="openAuthorCreateModal()">Ajouter un auteur</button>
                </div>
            {% endif %}

            {{ render(controller('App\\Controller\\LibraryController::filterAuthors', {'authors': authors})) }}
        </div>
    </div>
</div>

<script>
const tagSearchInput = document.getElementById('tag-search-input');
const tagSuggestions = document.getElementById('tag-suggestions');
const activeTags = document.getElementById('active-tags');
let selectedTags = [];

function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn.apply(this, args), delay);
    };
}

// Recherche AJAX des tags
tagSearchInput.addEventListener('input', debounce(function() {
    const query = this.value.trim();
    if (!query) {
        tagSuggestions.innerHTML = '';
        tagSuggestions.classList.add('hidden');
        return;
    }

    // Suggestions AJAX
    fetch('{{ path('app_tag_search') }}?q=' + encodeURIComponent(query))
        .then(r => r.json())
        .then(tags => {
            tagSuggestions.innerHTML = '';
            tags.forEach(tag => {
                if (selectedTags.find(t => t.id === tag.id)) return;
                const div = document.createElement('div');
                div.className = 'px-4 py-2 hover:bg-blue-100 cursor-pointer';
                div.textContent = tag.name;
                div.dataset.tagId = tag.id;
                div.dataset.tagName = tag.name;
                div.onclick = () => {
                    addActiveTag(tag.id, tag.name);
                    tagSuggestions.innerHTML = '';
                    tagSuggestions.classList.add('hidden');
                    tagSearchInput.value = '';
                };
                tagSuggestions.appendChild(div);
            });
            tagSuggestions.classList.toggle('hidden', tags.length === 0);
        });
}, 200));

function addActiveTag(id, name) {
    if (selectedTags.find(t => t.id == id)) return;
    selectedTags.push({id, name});
    renderActiveTags();
    filterAuthors();
}

function removeActiveTag(id) {
    selectedTags = selectedTags.filter(t => t.id != id);
    renderActiveTags();
    filterAuthors();
}

function renderActiveTags() {
    activeTags.innerHTML = '';
    selectedTags.forEach(tag => {
        const span = document.createElement('span');
        span.className = 'bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full flex items-center gap-1';
        span.innerHTML = `
            ${tag.name}
            <button type="button" class="remove-tag text-indigo-600 font-bold hover:text-red-500" data-tag-id="${tag.id}">&times;</button>
        `;
        span.querySelector('.remove-tag').onclick = () => removeActiveTag(tag.id);
        activeTags.appendChild(span);
    });
}

function filterAuthors() {
    const tagIds = selectedTags.map(t => t.id);
    const params = new URLSearchParams();
    tagIds.forEach(id => params.append('tags[]', id));
    fetch('{{ path('app_author_filter') }}?' + params.toString())
        .then(r => r.text())
        .then(html => {
            document.getElementById('authors-grid').innerHTML = html;
        });
}

// Fermer suggestions si clic ailleurs
document.addEventListener('click', function(e) {
    if (!tagSearchInput.contains(e.target) && !tagSuggestions.contains(e.target)) {
        tagSuggestions.classList.add('hidden');
    }
});
</script>

<!-- Modals -->
{% include 'modals/_author_create_modal.html.twig' with {'form': createForm} %}
{% include 'modals/_author_edit_modal.html.twig' with {'form': editForm} %}
{% endblock %}
