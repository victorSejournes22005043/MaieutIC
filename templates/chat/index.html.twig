{% extends 'base.html.twig' %}

{% block title %}Chat{% endblock %}

{% block body %}
<style>
    .chat-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .chat-messages { border: 1px solid #ccc; padding: 1em; height: 300px; overflow-y: scroll; margin-bottom: 1em; }
    .chat-form { display: flex; gap: 0.5em; }
    .chat-form input[type="text"] { flex: 1; }
</style>

<div class="chat-wrapper">
    <h1>Live Chat</h1>

    <div id="chat-messages" class="chat-messages">
        <!-- Messages will be loaded here -->
    </div>

    <form id="chat-form" class="chat-form">
        <input type="text" id="message" placeholder="Type your message..." required>
        <button type="submit">Send</button>
    </form>
</div>

<script>
    const chatMessages = document.getElementById('chat-messages');
    const chatForm = document.getElementById('chat-form');
    const messageInput = document.getElementById('message');
    let sending = false;

    // Function to fetch messages
    async function fetchMessages() {
        try {
            const response = await fetch('/chat/messages');
            if (!response.ok) throw new Error('Failed to fetch messages');
            const messages = await response.json();
            chatMessages.innerHTML = messages.map(msg => `<p><strong>${msg.user}:</strong> ${msg.text}</p>`).join('');
        } catch (error) {
            console.error('Error fetching messages:', error);
            chatMessages.innerHTML = '<p style="color: red;">Error loading messages. Check console for details.</p>';
        }
    }

    // Function to send a message
    chatForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (sending) return;
        sending = true;
        chatForm.querySelector('button[type="submit"]').disabled = true;
        const message = messageInput.value.trim();

        if (!message) {
            alert('Message cannot be empty');
            sending = false;
            chatForm.querySelector('button[type="submit"]').disabled = false;
            return;
        }

        try {
            const response = await fetch('/chat/send', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: message })
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Error sending message:', errorData);
                alert(errorData.error || 'Failed to send message');
                sending = false;
                chatForm.querySelector('button[type="submit"]').disabled = false;
                return;
            }

            messageInput.value = '';
            fetchMessages();
        } catch (error) {
            console.error('Error sending message:', error);
            alert('An error occurred while sending the message');
        }
        sending = false;
        chatForm.querySelector('button[type="submit"]').disabled = false;
    });

    // Fetch messages every 2 seconds
    setInterval(fetchMessages, 2000);
    fetchMessages();
</script>
{% endblock %}
