{% extends 'base.html.twig' %}

{% block title %}Register{% endblock %}

{% block body %}
{{ render(controller('App\\Controller\\NavbarController::navbar')) }}
<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-xl w-full mx-auto space-y-8 transform hover:scale-[1.01] transition-all duration-300">
        <div>
            <h1 class="mt-6 text-center text-4xl font-black text-gray-900 tracking-tight">Create Account</h1>
            <p class="mt-2 text-center text-gray-600">Join our research community</p>
        </div>

        {{ form_errors(registrationForm) }}

        {{ form_start(registrationForm, {'attr': {'class': 'mt-8 space-y-6 bg-white/80 backdrop-blur-sm p-8 rounded-2xl shadow-xl border border-white/20'}}) }}
        <div class="space-y-5">
            {% for field in [
                registrationForm.email,
                registrationForm.lastName,
                registrationForm.firstName,
                registrationForm.username
            ] %}
                <div class="group">
                    {{ form_label(field, null, {'label_attr': {'class': 'block text-sm font-semibold text-gray-700 mb-1 group-hover:text-indigo-600 transition-colors'}}) }}
                    {{ form_widget(field, {'attr': {
                        'class': 'appearance-none block w-full px-4 py-3 border border-gray-200 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 ease-in-out hover:border-indigo-300'
                    }}) }}
                </div>
            {% endfor %}

            <div>
                {{ form_label(registrationForm.plainPassword, 'Password', {'label_attr': {'class': 'block text-sm font-semibold text-gray-700 mb-1'}}) }}
                {{ form_widget(registrationForm.plainPassword, {'attr': {
                    'class': 'appearance-none block w-full px-4 py-3 border border-gray-200 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 ease-in-out hover:border-indigo-300'
                }}) }}
            </div>

            {% for field in [
                registrationForm.affiliationLocation,
                registrationForm.specialization,
                registrationForm.researchTopic
            ] %}
                <div class="group">
                    {{ form_label(field, null, {'label_attr': {'class': 'block text-sm font-semibold text-gray-700 mb-1 group-hover:text-indigo-600 transition-colors'}}) }}
                    {{ form_widget(field, {'attr': {
                        'class': 'appearance-none block w-full px-4 py-3 border border-gray-200 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 ease-in-out hover:border-indigo-300'
                    }}) }}
                </div>
            {% endfor %}

            <div class="flex items-center group hover:bg-indigo-50 p-2 rounded-lg transition-colors">
                {{ form_widget(registrationForm.agreeTerms, {'attr': {'class': 'h-5 w-5 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded'}}) }}
                {{ form_label(registrationForm.agreeTerms, null, {'label_attr': {'class': 'ml-3 block text-sm text-gray-700 group-hover:text-indigo-600 transition-colors'}}) }}
            </div>

            <div class="mt-10">
                <h3 class="text-xl font-bold text-gray-900 mb-6">Additional Questions</h3>

                {% for question, field in registrationForm.userQuestions %}
                    <div class="mt-5 group">
                        <label class="block text-sm font-semibold text-gray-700 mb-1 group-hover:text-indigo-600 transition-colors">{{ dynamic_questions[loop.index0] }}</label>
                        {{ form_widget(field, {'attr': {
                            'class': 'appearance-none block w-full px-4 py-3 border border-gray-200 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 ease-in-out hover:border-indigo-300'
                        }}) }}
                        {{ form_errors(field) }}
                    </div>
                {% endfor %}

                {# Exemple d'un champ taggable dynamique #}
                {% for field in registrationForm.taggableQuestions %}
                    <div class="taggable-question mt-5 group">
                        <label class="block text-sm font-semibold text-gray-700 mb-1 group-hover:text-indigo-600 transition-colors">{{ taggable_questions[loop.index0] }}</label>
                        {{ form_widget(field, {'attr': {
                            'class': 'block w-full rounded-xl border border-gray-200 shadow-sm px-4 py-3'
                        }}) }}

                        <div class="selected-tags mt-2 flex flex-wrap gap-2"></div>
                    </div>
                {% endfor %}
            </div>
        </div>

        <div class="mt-8">
            <button type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-gradient-to-r from-indigo-600 to-blue-600 hover:from-indigo-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transform transition-all hover:-translate-y-0.5">
                Create Account
            </button>
        </div>
        {{ form_end(registrationForm) }}
    </div>
</div>

<script>
document.querySelectorAll('.taggable-question').forEach((container) => {
    const select = container.querySelector('select');
    const tagDisplay = container.querySelector('.selected-tags');

    const inputName = select.name.replace(/\[\]$/, '');
    select.removeAttribute('name');

    select.addEventListener('change', (e) => {
        const selectedOption = select.selectedOptions[0];
        const tagName = selectedOption.textContent.trim();
        const tagId = selectedOption.value;

        if (!tagId || container.querySelector(`input[value="${tagId}"]`)) return;

        const hidden = document.createElement('input');
        hidden.type = 'hidden';
        hidden.name = `${inputName}[]`;
        hidden.value = tagId;

        const tag = document.createElement('span');
        tag.className = 'bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full flex items-center gap-1';
        tag.innerHTML = `
            ${tagName}
            <button type="button" class="remove-tag text-indigo-600 font-bold hover:text-red-500" data-tag-id="${tagId}">Ã—</button>
        `;

        tag.appendChild(hidden);
        tagDisplay.appendChild(tag);

        tag.querySelector('.remove-tag').addEventListener('click', () => {
            tag.remove();
        });

        select.selectedIndex = 0;
    });
});
</script>
{% endblock %}
