{% extends 'base.html.twig' %}

{% block title %}Register{% endblock %}

{% block body %}
{{ render(controller('App\\Controller\\NavbarController::navbar')) }}
<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-xl w-full mx-auto space-y-8">
        <div>
            <h1 class="mt-6 text-center text-4xl font-black text-gray-900 tracking-tight">Créer son compte</h1>
            <p class="mt-2 text-center text-gray-600">Rejoignez notre communauté de chercheur !</p>
        </div>

        {{ form_errors(registrationForm) }}

        {{ form_start(registrationForm, {'attr': {'class': 'mt-8 space-y-6 bg-white/50 backdrop-blur-sm p-8 rounded-xl shadow-xl border border-white/20'}}) }}
        <div class="space-y-5">
            {% set field_labels = {
            'email': 'Adresse e-mail',
            'lastName': 'Nom',
            'firstName': 'Prénom',
            'username': "Nom d'utilisateur"
            } %}
            {% for field in [
            registrationForm.email,
            registrationForm.lastName,
            registrationForm.firstName,
            registrationForm.username
            ] %}
            <div class="group">
                {{ form_label(field, field_labels[field.vars.name], {'label_attr': {'class': 'block text-sm font-semibold text-gray-700 mb-1'}}) }}
                {{ form_widget(field, {'attr': {
                'class': 'appearance-none block w-full px-4 py-2 border border-gray-200 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 ease-in-out hover:border-indigo-300'
                }}) }}
            </div>
            {% endfor %}

            <div>
            {{ form_label(registrationForm.plainPassword, 'Mot de passe', {'label_attr': {'class': 'block text-sm font-semibold text-gray-700 mb-1'}}) }}
            {{ form_widget(registrationForm.plainPassword, {'attr': {
                'class': 'appearance-none block w-full px-4 py-2 border border-gray-200 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 ease-in-out hover:border-indigo-300'
            }}) }}
            </div>

            {% set field_labels2 = {
            'affiliationLocation': "Lieu d'affiliation",
            'specialization': 'Spécialisation',
            'researchTopic': 'Sujet de recherche'
            } %}
            {% for field in [
            registrationForm.affiliationLocation,
            registrationForm.specialization,
            registrationForm.researchTopic
            ] %}
            <div class="group">
                {{ form_label(field, field_labels2[field.vars.name], {'label_attr': {'class': 'block text-sm font-semibold text-gray-700 mb-1 transition-colors'}}) }}
                {{ form_widget(field, {'attr': {
                'class': 'appearance-none block w-full px-4 py-2 border border-gray-200 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 ease-in-out hover:border-indigo-300'
                }}) }}
            </div>
            {% endfor %}

            <div class="flex items-center group hover:bg-indigo-50 p-2 rounded-lg transition-colors">
                {{ form_widget(registrationForm.agreeTerms, {'attr': {'class': 'h-5 w-5 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded'}}) }}
                {{ form_label(registrationForm.agreeTerms, null, {'label_attr': {'class': 'ml-3 block text-sm text-gray-700 transition-colors'}}) }}
            </div>

            <div class="mt-10">
                <h3 class="text-xl font-bold text-gray-900 mb-6">Questions additionnelles</h3>

                {% for question, field in registrationForm.userQuestions %}
                    <div class="mt-5 group">
                        <label class="block text-sm font-semibold text-gray-700 mb-1 transition-colors">{{ dynamic_questions[loop.index0] }}</label>
                        {{ form_widget(field, {'attr': {
                            'class': 'appearance-none block w-full px-4 py-2 border border-gray-200 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 ease-in-out hover:border-indigo-300'
                        }}) }}
                        {{ form_errors(field) }}
                    </div>
                {% endfor %}

                {% for field in registrationForm.taggableQuestions %}
                    <div class="taggable-question mt-5 group">
                        <label class="block text-sm font-semibold text-gray-700 mb-1 transition-colors">{{ taggable_questions[loop.index0] }}</label>
                        <div class="relative w-full">
                            <input type="text"
                                   class="taggable-tag-search w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
                                   placeholder="Rechercher un mot-clé..." autocomplete="off">
                            <div class="taggable-tag-suggestions absolute left-0 right-0 bg-white border border-gray-200 rounded shadow z-10 mt-1 hidden"></div>
                        </div>
                        <div class="selected-tags mt-2 flex flex-wrap gap-2"></div>
                        <div style="display: none;">
                            {{ form_widget(field) }}
                        </div>
                        {{ form_errors(field) }}
                    </div>
                {% endfor %}
            </div>
        </div>

        <div class="mt-8">
            <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-base font-medium text-white  bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transform transition-all hover:-translate-y-0.5">
                Créer mon compte !
            </button>
        </div>
        {{ form_end(registrationForm) }}
    </div>
</div>

<script>
function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn.apply(this, args), delay);
    };
}

document.querySelectorAll('.taggable-question').forEach((container, idx) => {
    const input = container.querySelector('.taggable-tag-search');
    const suggestions = container.querySelector('.taggable-tag-suggestions');
    const tagDisplay = container.querySelector('.selected-tags');
    const hiddenSelect = container.querySelector('select');
    let selectedTags = [];

    // Cache all tags from the select for local search fallback
    let allTags = [];
    if (hiddenSelect) {
        allTags = Array.from(hiddenSelect.options)
            .filter(opt => opt.value)
            .map(opt => ({id: opt.value, name: opt.textContent}));
    }

    input.value = '';
    suggestions.innerHTML = '';
    suggestions.classList.add('hidden');
    tagDisplay.innerHTML = '';

    input.oninput = debounce(function() {
        fetchTags(this.value.trim());
    }, 200);

    input.onfocus = function() {
        fetchTags('');
    };

    function fetchTags(query) {
        fetch('{{ path('app_tag_search') }}?q=' + encodeURIComponent(query))
            .then(r => r.json())
            .then(tags => {
                suggestions.innerHTML = '';
                tags.forEach(tag => {
                    if (selectedTags.find(t => t.id == tag.id)) return;
                    const div = document.createElement('div');
                    div.className = 'px-4 py-2 hover:bg-blue-100 cursor-pointer';
                    div.textContent = tag.name;
                    div.onclick = () => {
                        selectedTags.push({id: tag.id, name: tag.name});
                        renderActiveTags();
                        suggestions.innerHTML = '';
                        suggestions.classList.add('hidden');
                        input.value = '';
                    };
                    suggestions.appendChild(div);
                });
                if (tags.length > 0) {
                    suggestions.classList.remove('hidden');
                } else {
                    suggestions.classList.add('hidden');
                }
            });
    }

    function renderActiveTags() {
        tagDisplay.innerHTML = '';
        // Remove all hidden inputs from previous render
        container.querySelectorAll('input[type="hidden"][name^="' + hiddenSelect.name.replace(/\[\]$/, '') + '"]').forEach(e => e.remove());
        selectedTags.forEach(tag => {
            const span = document.createElement('span');
            span.className = 'bg-indigo-100 text-indigo-800 text-sm font-medium px-3 py-1 rounded-full flex items-center gap-1';
            span.innerHTML = `
                ${tag.name}
                <button type="button" class="remove-tag text-indigo-600 font-bold hover:text-red-500" data-tag-id="${tag.id}">&times;</button>
            `;
            const hidden = document.createElement('input');
            hidden.type = 'hidden';
            hidden.name = hiddenSelect.name.replace(/\[\]$/, '') + '[]';
            hidden.value = tag.id;
            span.appendChild(hidden);
            span.querySelector('.remove-tag').onclick = () => {
                selectedTags = selectedTags.filter(t => t.id != tag.id);
                renderActiveTags();
            };
            tagDisplay.appendChild(span);
        });
    }

    document.addEventListener('click', function(e) {
        if (!input.contains(e.target) && !suggestions.contains(e.target)) {
            suggestions.classList.add('hidden');
        }
    });

    // On submit, nothing to do: hidden inputs are already in place
});
</script>
{% endblock %}
